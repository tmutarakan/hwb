Телеграм бот.
--------------
Описание.
~~~~~~~~~~~~~~
Реализовано динамическое формирование инлайн-клавиатуры и хранение состояния для пользователя.

Создание телеграм бота.
~~~~~~~~~~~~~~~~~~~~~~~~~
Откройте Telegram, найдите **@BotFather** и начните беседу. Отправьте команду **/newbot** и следуйте инструкциям.

* Вы получите::

    1. свой токен;
    2. адрес Telegram API (https://api.telegram.org/bot);
    3. ссылку на документацию.

Обязательно сохраните токен, так как это ключ для взаимодействия с ботом.

:Примечание: Хранение токена должно быть локальным, ни в коем случае не выгружайте его в общий доступ, например в GitHub-репозиторий .

Далее начните беседу. Введите в поисковой строке имя бота и нажмите /start. Отправьте любое сообщение: оно станет первым обновлением, которое получит Телеграм бот.

Переменные окружения.
~~~~~~~~~~~~~~
Файл .env:

- TOKEN="**Токен телеграм бота**"
- APP_CONTAINER_NAME="**Имя контейнера приложения**"
- DB="db/sqlite/**имя базы**.db"
- SQLITE_CONTAINER_NAME="**Имя контейнера для веб-обозревателя базы данных SQLite**"
- SQLITE_PORTS="**внешний порт:внутренний порт**"
- REDIS_CONTAINER_NAME="**Имя контйнера Redis**"
- REDIS_CONTAINER_PORT= **внутренний порт**
- REDIS_CONTAINER_PORTS="**внешний порт:внутренний порт**"

Запуск.
~~~~~~~~~~~~~~
.. * С помощью менеджера зависимостей poetry::
    
    установить и запустить redis-server
    pip install poetry
    poetry install
    poetry run hwb/app.py

* Через Docker::
  
    sudo apt update
    sudo apt install docker
    chmod +x init.sh
    ./init.sh

Библиотеки и фреймворки.
~~~~~~~~~~~~~~~~~~~~~~~~~
* aiogram - это довольно простой и полностью асинхронный фреймворк для Telegram Bot API, написанный на Python 3.7 с asyncio и aiohttp. Он поможет вам сделать ваших ботов быстрее и проще.
* redis — резидентная система управления базами данных класса NoSQL с открытым исходным кодом, работающая со структурами данных типа «ключ — значение». Используется как для баз данных, так и для реализации кэшей, брокеров сообщений.
* flake8 — инструмент, позволяющий просканировать код проекта и обнаружить в нем стилистические ошибки и нарушения различных конвенций кода на Python.
